{"version":3,"sources":["components/conditionalRender.component.jsx","components/markedCode.component.jsx","components/codeGenerator.component.jsx","components/generalPractice17.component.jsx","App.js","index.js"],"names":["ConditionalRender","state","loggedIn","styles","buttonContainer","margin","width","background","padding","textAlign","this","setState","button","onClick","logout","login","className","style","React","Component","pre","fontSize","MarkedCode","code","codeID","type","key","CodeGenerator","props","codeBlocks","Map","codeId","get","generalPractice17","lainlines","height","buttons","showImgHandler","e","target","showClicked","display","switchImgHandler","switchClicked","imageUrl","switchImageUrl","src","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.531a8f08.chunk.js","sourcesContent":["import React from 'react';\n\n// Render either <LoginButton /> or <LogoutButton /> depending on its current state.\nclass ConditionalRender extends React.Component{\n  constructor(){\n    super();\n\n    this.state = { loggedIn: false };\n\n    this.styles = {buttonContainer:{\n                      margin: '0 auto',\n                      width: '500px',\n                      background: '#e05915',\n                      padding: '5px 10px',\n                      textAlign: 'center'\n                    }}\n  }\n\n  logout() { this.setState({loggedIn: false}) };\n  login() { this.setState({loggedIn: true}) };\n\n  render(){\n    let button;\n\n    if(this.state.loggedIn)\n      button = <button onClick={() => this.logout()}>Log Out</button>;\n    else\n      button = <button onClick={() => this.login()}>Log In</button>;\n\n    return (\n      <div className=\"buttonContainer\" style={this.styles.buttonContainer}>\n        <h2>Login/out Button Component</h2>\n        <p>Conditionally renders either login or<br/> logout button depending on its current state.</p>\n        {button}\n      </div>\n    );\n  }\n}\n\nexport default ConditionalRender;\n","import React from 'react';\n\nconst styles = {\n  pre: {fontSize: '1.4rem'}\n}\n\nconst MarkedCode = ({code, codeID, type}) => (\n  <div>\n      <pre className={type} key={codeID} style={styles.pre}><code>\n        {code}\n      </code>\n    </pre>\n  </div>\n);\n\nexport default MarkedCode;\n","import React from 'react';\n\nimport Prism from \"prismjs\";\nimport MarkedCode from './markedCode.component';\n\nimport '../prism.css'\n\nclass CodeGenerator extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n      codeBlocks: new Map([['conditional17',\n                    {type: 'language-javascript',\n                    code:\n`//login/logout button component\n\nimport React from 'react';\n\nclass ConditionalRender extends React.Component{\n  constructor(){\n    super();\n\n    this.state = { loggedIn: false };\n\n    this.styles = {buttonContainer:{\n                      margin: '0 auto',\n                      width: '500px',\n                      background: '#e05915',\n                      padding: '5px 10px',\n                      textAlign: 'center'\n                    }}\n  }\n\n  logout() { this.setState({loggedIn: false}) };\n  login() { this.setState({loggedIn: true}) };\n\n  render(){\n    let button;\n    if(this.state.loggedIn){\n      button = <button onClick={() => this.logout()}>Log Out</button>;}\n    else{\n      button = <button onClick={() => this.login()}>Log In</button>;}\n\n    return (\n      <div className=\"buttonContainer\" style={this.styles.buttonContainer}>\n        <h2>Login/out Button Component</h2>\n        <p>Conditionally renders either LoginButton or LogoutButton depending on its current state.</p>\n        {button}\n      </div>\n    );\n  }\n}\n\nexport default ConditionalRender;`}],\n                                    ['markedCode17',\n                                      {type: 'language-javascript',\ncode:\n`//Component for holding higlighted code (you're looking at it now). Stateless functional component.\n\nimport React from 'react';\n\nconst styles = {\n  pre: {fontSize: '1.4rem'}\n}\n\nconst MarkedCode = ({code, codeID, type}) => (\n  <div>\n      <pre className={type} key={codeID} style={styles.pre}><code>\n        {code}\n      </code>\n    </pre>\n  </div>\n);\n\nexport default MarkedCode;`}],\n                              ['codeGenerator17',\n                                {type: 'language-javascript',\n                                 code:\n`//Component manages state for code Highlighted Code Components and renders based on id passed into\n\nimport React from 'react';\n\nimport Prism from \"prismjs\";\nimport MarkedCode from './markedCode.component';\n\nimport '../prism.css'\n\nclass CodeGenerator extends React.Component{\n  constructor(props){\n       super(props);\n\n       this.state = {\n         codeBlocks: new Map([['codeID-goes-here',\n                             {type: 'language-goes-here',\n                              code: code-goes-here]],\n                           [['next-codeID-goes-here',\n                              {type: 'language-goes-here',\n                              code: code-goes-here]])\n         }\n   };\n\n   render(){\n     const {codeId} = this.props;\n     const {type, code} = this.state.codeBlocks.get(codeId);\n\n     return <MarkedCode codeID={codeId} code={code} type={type} />;\n   }\n}\n\nexport default CodeGenerator;`}],\n                                ['generatorUse17',\n                                  {type: 'language-javascript',\n                                   code:\n`const App = () => {\n  return (\n    <div className=\"App\" style={styles.App}>\n      <ConditionalRender />\n\n      <CodeGenerator codeId={'conditional17'} />\n\n      <h2>Highlighted Code Component</h2>\n      <CodeGenerator codeId={'markedCode17'} />\n\n      <h2>Highlighted Code Generator Component</h2>\n      <CodeGenerator codeId={'codeGenerator17'} />\n\n      <h2>Example of Highlighted Code Use</h2>\n      <CodeGenerator codeId={'generatorUse17'} />\n    </div>\n  );\n}`\n                              }],\n                               ['conditionalInline17',\n                                {type: 'language-javascript',\n                                code:\n`\nclass generalPractice17 extends React.Component{\n  constructor(){\n    super();\n\n    this.state = {imageUrl: '../images/lainlines.gif',\n                  switchImageUrl: '../images/bluescreen.gif',\n                  showClicked: 0,\n                  switchClicked: 0};\n  }\n\n  styles = {\n      lainlines: {width:'200px',\n                  height: '200px'},\n      buttons: {margin: '200px 20px 0 20px'}\n  };\n\n  showImgHandler = (e) => {\n    const target = e.target;\n    this.setState(state => ({showClicked: ++state.showClicked}), () =>\n      {if(this.state.showClicked ===3) target.style.display = 'none'});\n  }\n\n  switchImgHandler = (e) => {\n    this.setState(state => ({switchClicked: ++state.switchClicked}))\n  }\n\n  render(){\n    return (\n      <div>\n        <button onClick={this.showImgHandler} style={this.styles.buttons}>Click 3x to show image: {this.state.showClicked}</button>\n\n        //INLINE IF CONDITIONAL RENDER\n        {this.state.showClicked === 3 &&\n          <div>\n           <button onClick={this.switchImgHandler} style={this.styles.buttons}>\n             Counter at increments of 3 show lain: {this.state.switchClicked}\n           </button>\n           //INLINE IF-ELSE CONDITIONAL RENDER\n           {this.state.switchClicked % 3 === 0 & this.state.switchClicked !== 0 ?\n             (<img src={this.state.imageUrl} style={this.styles.lainlines}/>) :\n             (<img src={this.state.switchImageUrl} style={this.styles.lainlines}/>)\n           }\n         </div>\n        }\n      </div>\n    );\n  }\n}`}]\n                  ])};\n  }\n\n  render(){\n    const {codeId} = this.props;\n    const {type, code} = this.state.codeBlocks.get(codeId);\n\n    return <MarkedCode codeID={codeId} code={code} type={type} />;\n  }\n}\n\nexport default CodeGenerator;\n","import React from 'react';\n\nclass generalPractice17 extends React.Component{\n  constructor(){\n    super();\n\n    this.state = {imageUrl: '../images/lainlines.gif',\n                  switchImageUrl: '../images/bluescreen.gif',\n                  showClicked: 0,\n                  switchClicked: 0};\n  }\n\n  styles = {\n      lainlines: {width:'200px',\n                  height: '200px'},\n      buttons: {margin: '200px 20px 0 20px'}\n    };\n\n  showImgHandler = (e) => {\n    const target = e.target;\n    this.setState(state => ({showClicked: ++state.showClicked}), () =>\n      {if(this.state.showClicked ===3) target.style.display = 'none'});\n  }\n\n  switchImgHandler = (e) => {\n    this.setState(state => ({switchClicked: ++state.switchClicked}))\n  }\n\n  render(){\n\n    return (\n      <div>\n        <button onClick={this.showImgHandler} style={this.styles.buttons}>Click 3x to show image: {this.state.showClicked}</button>\n\n        {this.state.showClicked === 3 &&\n          <div>\n           <button onClick={this.switchImgHandler} style={this.styles.buttons}>\n             Counter at increments of 3 show lain: {this.state.switchClicked}\n           </button>\n           {this.state.switchClicked % 3 === 0 & this.state.switchClicked !== 0 ?\n             (<img src={this.state.imageUrl} style={this.styles.lainlines}/>) :\n             (<img src={this.state.switchImageUrl} style={this.styles.lainlines}/>)\n           }\n         </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default generalPractice17;\n","import React from 'react';\nimport './App.css';\n\nimport ConditionalRender from './components/conditionalRender.component';\nimport CodeGenerator from './components/codeGenerator.component';\nimport General17 from './components/generalPractice17.component';\n\nconst styles = {\n  App: {background: 'green',\n        width: '70%',\n        margin: '0 auto',\n        padding: '10px'\n  },\n}\n\nconst App = () => {\n  return (\n    <div className=\"App\" style={styles.App}>\n      <ConditionalRender />\n      <CodeGenerator codeId={'conditional17'} />\n      <h2>Highlighted Code Component</h2>\n      <CodeGenerator codeId={'markedCode17'} />\n      <h2>Highlighted Code Generator Component</h2>\n      <CodeGenerator codeId={'codeGenerator17'} />\n      <h2>Example of Highlighted Code Use</h2>\n      <CodeGenerator codeId={'generatorUse17'} />\n      <h2>Inline conditionals</h2>\n      <General17 />\n      <h2>Inline conditionals Code</h2>\n      <CodeGenerator codeId={'conditionalInline17'} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}