{"ast":null,"code":"var _jsxFileName = \"/Users/miskellk/Desktop/lain-projects/dev-blog/practice-weeks/week-17-react/src/components/codeGenerator.component.jsx\";\nimport React from 'react';\nimport MarkedCode from './markedCode.component';\n\nclass CodeGenerator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      codeBlocks: new Map(['conditional17', {\n        type: 'js',\n        code: \"class ConditionalRender extends React.Component{\\n                        constructor(){\\n                          super();\\n\\n                          this.state = { loggedIn: false };\\n\\n                          this.styles = {buttonContainer:{\\n                            margin: '0 auto',\\n                            width: '400px',\\n                            background: 'red'\\n                          }}\\n                        }\\n\\n                        logout() { this.setState({loggedIn: false}) };\\n                        login() { this.setState({loggedIn: true}) };\\n\\n                        render(){\\n                          let button;\\n\\n                          if(this.state.loggedIn)\\n                            button = <button onClick={() => this.logout()}>Log Out</button>;\\n                          else\\n                            button = <button onClick={() => this.login()}>Log In</button>;\\n\\n                          return (\\n                            <div className='buttonContainer' style={this.styles.buttonContainer}>\\n                              <p>Conditionally renders either LoginButton or LogoutButton depending on its current state.</p>\\n                              {button}\\n                            </div>\\n                          );\\n                        }\\n                      }\\n\\n                      export default ConditionalRender;\"\n      }])\n    };\n  }\n\n  render() {\n    const codeId = this.props.codeId.codeId;\n\n    const _this$state$codeBlock = this.state.codeBlocks.get(codeId),\n          type = _this$state$codeBlock.type,\n          code = _this$state$codeBlock.code;\n\n    return React.createElement(MarkedCode, {\n      codeID: codeId,\n      code: code,\n      type: type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default CodeGenerator;","map":{"version":3,"sources":["/Users/miskellk/Desktop/lain-projects/dev-blog/practice-weeks/week-17-react/src/components/codeGenerator.component.jsx"],"names":["React","MarkedCode","CodeGenerator","Component","constructor","props","state","codeBlocks","Map","type","code","render","codeId","get"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,UAAP,MAAuB,wBAAvB;;AAEA,MAAMC,aAAN,SAA4BF,KAAK,CAACG,SAAlC,CAA2C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,IAAIC,GAAJ,CAAQ,CAAC,eAAD,EACN;AAACC,QAAAA,IAAI,EAAE,IAAP;AACAC,QAAAA,IAAI;AADJ,OADM,CAAR;AADD,KAAb;AAuCD;;AAEDC,EAAAA,MAAM,GAAE;AAAA,UACCC,MADD,GACW,KAAKP,KAAL,CAAWO,MADtB,CACCA,MADD;;AAAA,kCAEe,KAAKN,KAAL,CAAWC,UAAX,CAAsBM,GAAtB,CAA0BD,MAA1B,CAFf;AAAA,UAECH,IAFD,yBAECA,IAFD;AAAA,UAEOC,IAFP,yBAEOA,IAFP;;AAIN,WAAO,oBAAC,UAAD;AAAY,MAAA,MAAM,EAAEE,MAApB;AAA4B,MAAA,IAAI,EAAEF,IAAlC;AAAwC,MAAA,IAAI,EAAED,IAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAlDwC;;AAqD3C,eAAeP,aAAf","sourcesContent":["import React from 'react';\n\nimport MarkedCode from './markedCode.component';\n\nclass CodeGenerator extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n      codeBlocks: new Map(['conditional17',\n                    {type: 'js',\n                    code:\n                      `class ConditionalRender extends React.Component{\n                        constructor(){\n                          super();\n\n                          this.state = { loggedIn: false };\n\n                          this.styles = {buttonContainer:{\n                            margin: '0 auto',\n                            width: '400px',\n                            background: 'red'\n                          }}\n                        }\n\n                        logout() { this.setState({loggedIn: false}) };\n                        login() { this.setState({loggedIn: true}) };\n\n                        render(){\n                          let button;\n\n                          if(this.state.loggedIn)\n                            button = <button onClick={() => this.logout()}>Log Out</button>;\n                          else\n                            button = <button onClick={() => this.login()}>Log In</button>;\n\n                          return (\n                            <div className='buttonContainer' style={this.styles.buttonContainer}>\n                              <p>Conditionally renders either LoginButton or LogoutButton depending on its current state.</p>\n                              {button}\n                            </div>\n                          );\n                        }\n                      }\n\n                      export default ConditionalRender;`}])\n        }\n  }\n\n  render(){\n    const {codeId} = this.props.codeId;\n    const {type, code} = this.state.codeBlocks.get(codeId);\n\n    return <MarkedCode codeID={codeId} code={code} type={type} />;\n  }\n}\n\nexport default CodeGenerator;\n"]},"metadata":{},"sourceType":"module"}