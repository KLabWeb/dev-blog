{"ast":null,"code":"import _classCallCheck from\"/Users/miskellk/Desktop/lain-projects/dev-blog/practice-weeks/week-17-react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/miskellk/Desktop/lain-projects/dev-blog/practice-weeks/week-17-react/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/miskellk/Desktop/lain-projects/dev-blog/practice-weeks/week-17-react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/miskellk/Desktop/lain-projects/dev-blog/practice-weeks/week-17-react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/miskellk/Desktop/lain-projects/dev-blog/practice-weeks/week-17-react/node_modules/@babel/runtime/helpers/esm/inherits\";import React from'react';import Prism from\"prismjs\";import MarkedCode from'./markedCode.component';import'../prism.css';var CodeGenerator=/*#__PURE__*/function(_React$Component){_inherits(CodeGenerator,_React$Component);function CodeGenerator(props){var _this;_classCallCheck(this,CodeGenerator);_this=_possibleConstructorReturn(this,_getPrototypeOf(CodeGenerator).call(this,props));_this.state={codeBlocks:new Map([['conditional17',{type:'language-javascript',code:\"//login/logout button component\\n\\nimport React from 'react';\\n\\nclass ConditionalRender extends React.Component{\\n  constructor(){\\n    super();\\n\\n    this.state = { loggedIn: false };\\n\\n    this.styles = {buttonContainer:{\\n                      margin: '0 auto',\\n                      width: '500px',\\n                      background: '#e05915',\\n                      padding: '5px 10px',\\n                      textAlign: 'center'\\n                    }}\\n  }\\n\\n  logout() { this.setState({loggedIn: false}) };\\n  login() { this.setState({loggedIn: true}) };\\n\\n  render(){\\n    let button;\\n    if(this.state.loggedIn){\\n      button = <button onClick={() => this.logout()}>Log Out</button>;}\\n    else{\\n      button = <button onClick={() => this.login()}>Log In</button>;}\\n\\n    return (\\n      <div className=\\\"buttonContainer\\\" style={this.styles.buttonContainer}>\\n        <h2>Login/out Button Component</h2>\\n        <p>Conditionally renders either LoginButton or LogoutButton depending on its current state.</p>\\n        {button}\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default ConditionalRender;\"}],['markedCode17',{type:'language-javascript',code:\"//Component for holding higlighted code (you're looking at it now). Stateless functional component.\\n\\nimport React from 'react';\\n\\nconst styles = {\\n  pre: {fontSize: '1.4rem'}\\n}\\n\\nconst MarkedCode = ({code, codeID, type}) => (\\n  <div>\\n      <pre className={type} key={codeID} style={styles.pre}><code>\\n        {code}\\n      </code>\\n    </pre>\\n  </div>\\n);\\n\\nexport default MarkedCode;\"}],['codeGenerator17',{type:'language-javascript',code:\"//Component manages state for code Highlighted Code Components and renders based on id passed into\\n\\nimport React from 'react';\\n\\nimport Prism from \\\"prismjs\\\";\\nimport MarkedCode from './markedCode.component';\\n\\nimport '../prism.css'\\n\\nclass CodeGenerator extends React.Component{\\n  constructor(props){\\n       super(props);\\n\\n       this.state = {\\n         codeBlocks: new Map([['codeID-goes-here',\\n                             {type: 'language-goes-here',\\n                              code: code-goes-here]],\\n                           [['next-codeID-goes-here',\\n                              {type: 'language-goes-here',\\n                              code: code-goes-here]])\\n         }\\n   };\\n\\n   render(){\\n     const {codeId} = this.props;\\n     const {type, code} = this.state.codeBlocks.get(codeId);\\n\\n     return <MarkedCode codeID={codeId} code={code} type={type} />;\\n   }\\n}\\n\\nexport default CodeGenerator;\"}],['generatorUse17',{type:'language-javascript',code:\"const App = () => {\\n  return (\\n    <div className=\\\"App\\\" style={styles.App}>\\n      <ConditionalRender />\\n\\n      <CodeGenerator codeId={'conditional17'} />\\n\\n      <h2>Highlighted Code Component</h2>\\n      <CodeGenerator codeId={'markedCode17'} />\\n\\n      <h2>Highlighted Code Generator Component</h2>\\n      <CodeGenerator codeId={'codeGenerator17'} />\\n\\n      <h2>Example of Highlighted Code Use</h2>\\n      <CodeGenerator codeId={'generatorUse17'} />\\n    </div>\\n  );\\n}\"}],['conditionalInline17',{type:'language-javascript',code:\"\\nclass generalPractice17 extends React.Component{\\n  constructor(){\\n    super();\\n\\n    this.state = {imageUrl: '../images/lainlines.gif',\\n                  switchImageUrl: '../images/bluescreen.gif',\\n                  showClicked: 0,\\n                  switchClicked: 0};\\n  }\\n\\n  styles = {\\n      lainlines: {width:'200px',\\n                  height: '200px'},\\n      buttons: {margin: '200px 20px 0 20px'}\\n  };\\n\\n  showImgHandler = (e) => {\\n    const target = e.target;\\n    this.setState(state => ({showClicked: ++state.showClicked}), () =>\\n      {if(this.state.showClicked ===3) target.style.display = 'none'});\\n  }\\n\\n  switchImgHandler = (e) => {\\n    this.setState(state => ({switchClicked: ++state.switchClicked}))\\n  }\\n\\n  render(){\\n    return (\\n      <div>\\n        <button onClick={this.showImgHandler} style={this.styles.buttons}>Click 3x to show image: {this.state.showClicked}</button>\\n\\n        //INLINE IF CONDITIONAL RENDER\\n        {this.state.showClicked === 3 &&\\n          <div>\\n           <button onClick={this.switchImgHandler} style={this.styles.buttons}>\\n             Counter at increments of 3 show lain: {this.state.switchClicked}\\n           </button>\\n           //INLINE IF-ELSE CONDITIONAL RENDER\\n           {this.state.switchClicked % 3 === 0 & this.state.switchClicked !== 0 ?\\n             (<img src={this.state.imageUrl} style={this.styles.lainlines}/>) :\\n             (<img src={this.state.switchImageUrl} style={this.styles.lainlines}/>)\\n           }\\n         </div>\\n        }\\n      </div>\\n    );\\n  }\\n}\"}]])};return _this;}_createClass(CodeGenerator,[{key:\"render\",value:function render(){var codeId=this.props.codeId;var _this$state$codeBlock=this.state.codeBlocks.get(codeId),type=_this$state$codeBlock.type,code=_this$state$codeBlock.code;return React.createElement(MarkedCode,{codeID:codeId,code:code,type:type});}}]);return CodeGenerator;}(React.Component);export default CodeGenerator;","map":{"version":3,"sources":["/Users/miskellk/Desktop/lain-projects/dev-blog/practice-weeks/week-17-react/src/components/codeGenerator.component.jsx"],"names":["React","Prism","MarkedCode","CodeGenerator","props","state","codeBlocks","Map","type","code","codeId","get","Component"],"mappings":"oyBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAOC,CAAAA,UAAP,KAAuB,wBAAvB,CAEA,MAAO,cAAP,C,GAEMC,CAAAA,a,mFACJ,uBAAYC,KAAZ,CAAkB,+CAChB,+EAAMA,KAAN,GAEA,MAAKC,KAAL,CAAa,CACXC,UAAU,CAAE,GAAIC,CAAAA,GAAJ,CAAQ,CAAC,CAAC,eAAD,CACP,CAACC,IAAI,CAAE,qBAAP,CACAC,IAAI,8lCADJ,CADO,CAAD,CA2CU,CAAC,cAAD,CACE,CAACD,IAAI,CAAE,qBAAP,CACtCC,IAAI,8YADkC,CADF,CA3CV,CAgEI,CAAC,iBAAD,CACE,CAACD,IAAI,CAAE,qBAAP,CACCC,IAAI,26BADL,CADF,CAhEJ,CAmGM,CAAC,gBAAD,CACE,CAACD,IAAI,CAAE,qBAAP,CACCC,IAAI,seADL,CADF,CAnGN,CAyHK,CAAC,qBAAD,CACC,CAACD,IAAI,CAAE,qBAAP,CACAC,IAAI,iiDADJ,CADD,CAzHL,CAAR,CADD,CAAb,CAHgB,aAkLjB,C,iEAEO,IACCC,CAAAA,MADD,CACW,KAAKN,KADhB,CACCM,MADD,2BAEe,KAAKL,KAAL,CAAWC,UAAX,CAAsBK,GAAtB,CAA0BD,MAA1B,CAFf,CAECF,IAFD,uBAECA,IAFD,CAEOC,IAFP,uBAEOA,IAFP,CAIN,MAAO,qBAAC,UAAD,EAAY,MAAM,CAAEC,MAApB,CAA4B,IAAI,CAAED,IAAlC,CAAwC,IAAI,CAAED,IAA9C,EAAP,CACD,C,2BA1LyBR,KAAK,CAACY,S,EA6LlC,cAAeT,CAAAA,aAAf","sourcesContent":["import React from 'react';\n\nimport Prism from \"prismjs\";\nimport MarkedCode from './markedCode.component';\n\nimport '../prism.css'\n\nclass CodeGenerator extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n      codeBlocks: new Map([['conditional17',\n                    {type: 'language-javascript',\n                    code:\n`//login/logout button component\n\nimport React from 'react';\n\nclass ConditionalRender extends React.Component{\n  constructor(){\n    super();\n\n    this.state = { loggedIn: false };\n\n    this.styles = {buttonContainer:{\n                      margin: '0 auto',\n                      width: '500px',\n                      background: '#e05915',\n                      padding: '5px 10px',\n                      textAlign: 'center'\n                    }}\n  }\n\n  logout() { this.setState({loggedIn: false}) };\n  login() { this.setState({loggedIn: true}) };\n\n  render(){\n    let button;\n    if(this.state.loggedIn){\n      button = <button onClick={() => this.logout()}>Log Out</button>;}\n    else{\n      button = <button onClick={() => this.login()}>Log In</button>;}\n\n    return (\n      <div className=\"buttonContainer\" style={this.styles.buttonContainer}>\n        <h2>Login/out Button Component</h2>\n        <p>Conditionally renders either LoginButton or LogoutButton depending on its current state.</p>\n        {button}\n      </div>\n    );\n  }\n}\n\nexport default ConditionalRender;`}],\n                                    ['markedCode17',\n                                      {type: 'language-javascript',\ncode:\n`//Component for holding higlighted code (you're looking at it now). Stateless functional component.\n\nimport React from 'react';\n\nconst styles = {\n  pre: {fontSize: '1.4rem'}\n}\n\nconst MarkedCode = ({code, codeID, type}) => (\n  <div>\n      <pre className={type} key={codeID} style={styles.pre}><code>\n        {code}\n      </code>\n    </pre>\n  </div>\n);\n\nexport default MarkedCode;`}],\n                              ['codeGenerator17',\n                                {type: 'language-javascript',\n                                 code:\n`//Component manages state for code Highlighted Code Components and renders based on id passed into\n\nimport React from 'react';\n\nimport Prism from \"prismjs\";\nimport MarkedCode from './markedCode.component';\n\nimport '../prism.css'\n\nclass CodeGenerator extends React.Component{\n  constructor(props){\n       super(props);\n\n       this.state = {\n         codeBlocks: new Map([['codeID-goes-here',\n                             {type: 'language-goes-here',\n                              code: code-goes-here]],\n                           [['next-codeID-goes-here',\n                              {type: 'language-goes-here',\n                              code: code-goes-here]])\n         }\n   };\n\n   render(){\n     const {codeId} = this.props;\n     const {type, code} = this.state.codeBlocks.get(codeId);\n\n     return <MarkedCode codeID={codeId} code={code} type={type} />;\n   }\n}\n\nexport default CodeGenerator;`}],\n                                ['generatorUse17',\n                                  {type: 'language-javascript',\n                                   code:\n`const App = () => {\n  return (\n    <div className=\"App\" style={styles.App}>\n      <ConditionalRender />\n\n      <CodeGenerator codeId={'conditional17'} />\n\n      <h2>Highlighted Code Component</h2>\n      <CodeGenerator codeId={'markedCode17'} />\n\n      <h2>Highlighted Code Generator Component</h2>\n      <CodeGenerator codeId={'codeGenerator17'} />\n\n      <h2>Example of Highlighted Code Use</h2>\n      <CodeGenerator codeId={'generatorUse17'} />\n    </div>\n  );\n}`\n                              }],\n                               ['conditionalInline17',\n                                {type: 'language-javascript',\n                                code:\n`\nclass generalPractice17 extends React.Component{\n  constructor(){\n    super();\n\n    this.state = {imageUrl: '../images/lainlines.gif',\n                  switchImageUrl: '../images/bluescreen.gif',\n                  showClicked: 0,\n                  switchClicked: 0};\n  }\n\n  styles = {\n      lainlines: {width:'200px',\n                  height: '200px'},\n      buttons: {margin: '200px 20px 0 20px'}\n  };\n\n  showImgHandler = (e) => {\n    const target = e.target;\n    this.setState(state => ({showClicked: ++state.showClicked}), () =>\n      {if(this.state.showClicked ===3) target.style.display = 'none'});\n  }\n\n  switchImgHandler = (e) => {\n    this.setState(state => ({switchClicked: ++state.switchClicked}))\n  }\n\n  render(){\n    return (\n      <div>\n        <button onClick={this.showImgHandler} style={this.styles.buttons}>Click 3x to show image: {this.state.showClicked}</button>\n\n        //INLINE IF CONDITIONAL RENDER\n        {this.state.showClicked === 3 &&\n          <div>\n           <button onClick={this.switchImgHandler} style={this.styles.buttons}>\n             Counter at increments of 3 show lain: {this.state.switchClicked}\n           </button>\n           //INLINE IF-ELSE CONDITIONAL RENDER\n           {this.state.switchClicked % 3 === 0 & this.state.switchClicked !== 0 ?\n             (<img src={this.state.imageUrl} style={this.styles.lainlines}/>) :\n             (<img src={this.state.switchImageUrl} style={this.styles.lainlines}/>)\n           }\n         </div>\n        }\n      </div>\n    );\n  }\n}`}]\n                  ])};\n  }\n\n  render(){\n    const {codeId} = this.props;\n    const {type, code} = this.state.codeBlocks.get(codeId);\n\n    return <MarkedCode codeID={codeId} code={code} type={type} />;\n  }\n}\n\nexport default CodeGenerator;\n"]},"metadata":{},"sourceType":"module"}