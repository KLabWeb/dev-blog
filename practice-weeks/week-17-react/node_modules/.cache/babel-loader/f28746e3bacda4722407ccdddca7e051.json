{"ast":null,"code":"var _jsxFileName = \"/Users/miskellk/Desktop/lain-projects/dev-blog/practice-weeks/week-17-react/src/components/codeGenerator.component.jsx\";\nimport React from 'react';\nimport Prism from \"prismjs\";\nimport MarkedCode from './markedCode.component';\nimport '../prism.css';\n\nclass CodeGenerator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      codeBlocks: new Map([['conditional17', {\n        type: 'language-javascript',\n        code: \"import React from 'react';\\n\\nclass ConditionalRender extends React.Component{\\n  constructor(){\\n    super();\\n\\n    this.state = { loggedIn: false };\\n\\n    this.styles = {buttonContainer:{\\n                      margin: '0 auto',\\n                      width: '500px',\\n                      background: '#e05915',\\n                      padding: '5px 10px',\\n                      textAlign: 'center'\\n                    }}\\n  }\\n\\n  logout() { this.setState({loggedIn: false}) };\\n  login() { this.setState({loggedIn: true}) };\\n\\n  render(){\\n    let button;\\n    if(this.state.loggedIn){\\n      button = <button onClick={() => this.logout()}>Log Out</button>;}\\n    else{\\n      button = <button onClick={() => this.login()}>Log In</button>;}\\n\\n    return (\\n      <div className=\\\"buttonContainer\\\" style={this.styles.buttonContainer}>\\n        <h2>Login/out Button Component</h2>\\n        <p>Conditionally renders either LoginButton or LogoutButton depending on its current state.</p>\\n        {button}\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default ConditionalRender;\"\n      }], ['markedCode17', {\n        type: 'language-javascript',\n        code: \"import React from 'react';\\n\\nconst styles = {\\n  pre: {fontSize: '1.4rem'}\\n}\\n\\nconst MarkedCode = ({code, codeID, type}) => (\\n  <div>\\n      <pre className={type} key={codeID} style={styles.pre}><code>\\n        {code}\\n      </code>\\n    </pre>\\n  </div>\\n);\\n\\nexport default MarkedCode;\"\n      }], ['codeGenerator17', {\n        type: 'language-javascript',\n        code: \"import React from 'react';\\n\\nimport Prism from \\\"prismjs\\\";\\nimport MarkedCode from './markedCode.component';\\n\\nimport '../prism.css'\\n\\nclass CodeGenerator extends React.Component{\\n  constructor(props){\\n       super(props);\\n\\n       this.state = {\\n         codeBlocks: new Map([['codeID-goes-here',\\n                             {type: 'language-goes-here',\\n                              code: code-goes-here]],\\n                           [['next-codeID-goes-here',\\n                              {type: 'language-goes-here',\\n                              code: code-goes-here]])\\n         }\\n   };\"\n      }]])\n    };\n  }\n\n  render() {\n    const codeId = this.props.codeId;\n\n    const _this$state$codeBlock = this.state.codeBlocks.get(codeId),\n          type = _this$state$codeBlock.type,\n          code = _this$state$codeBlock.code;\n\n    return React.createElement(MarkedCode, {\n      codeID: codeId,\n      code: code,\n      type: type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default CodeGenerator;","map":{"version":3,"sources":["/Users/miskellk/Desktop/lain-projects/dev-blog/practice-weeks/week-17-react/src/components/codeGenerator.component.jsx"],"names":["React","Prism","MarkedCode","CodeGenerator","Component","constructor","props","state","codeBlocks","Map","type","code","render","codeId","get"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AAEA,OAAO,cAAP;;AAEA,MAAMC,aAAN,SAA4BH,KAAK,CAACI,SAAlC,CAA2C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,IAAIC,GAAJ,CAAQ,CAAC,CAAC,eAAD,EACP;AAACC,QAAAA,IAAI,EAAE,qBAAP;AACAC,QAAAA,IAAI;AADJ,OADO,CAAD,EAyCU,CAAC,cAAD,EACE;AAACD,QAAAA,IAAI,EAAE,qBAAP;AACtCC,QAAAA,IAAI;AADkC,OADF,CAzCV,EA4DI,CAAC,iBAAD,EACE;AAACD,QAAAA,IAAI,EAAE,qBAAP;AACCC,QAAAA,IAAI;AADL,OADF,CA5DJ,CAAR;AADD,KAAb;AAsFD;;AAEDC,EAAAA,MAAM,GAAE;AAAA,UACCC,MADD,GACW,KAAKP,KADhB,CACCO,MADD;;AAAA,kCAEe,KAAKN,KAAL,CAAWC,UAAX,CAAsBM,GAAtB,CAA0BD,MAA1B,CAFf;AAAA,UAECH,IAFD,yBAECA,IAFD;AAAA,UAEOC,IAFP,yBAEOA,IAFP;;AAIN,WAAO,oBAAC,UAAD;AAAY,MAAA,MAAM,EAAEE,MAApB;AAA4B,MAAA,IAAI,EAAEF,IAAlC;AAAwC,MAAA,IAAI,EAAED,IAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAjGwC;;AAoG3C,eAAeP,aAAf","sourcesContent":["import React from 'react';\n\nimport Prism from \"prismjs\";\nimport MarkedCode from './markedCode.component';\n\nimport '../prism.css'\n\nclass CodeGenerator extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n      codeBlocks: new Map([['conditional17',\n                    {type: 'language-javascript',\n                    code:\n`import React from 'react';\n\nclass ConditionalRender extends React.Component{\n  constructor(){\n    super();\n\n    this.state = { loggedIn: false };\n\n    this.styles = {buttonContainer:{\n                      margin: '0 auto',\n                      width: '500px',\n                      background: '#e05915',\n                      padding: '5px 10px',\n                      textAlign: 'center'\n                    }}\n  }\n\n  logout() { this.setState({loggedIn: false}) };\n  login() { this.setState({loggedIn: true}) };\n\n  render(){\n    let button;\n    if(this.state.loggedIn){\n      button = <button onClick={() => this.logout()}>Log Out</button>;}\n    else{\n      button = <button onClick={() => this.login()}>Log In</button>;}\n\n    return (\n      <div className=\"buttonContainer\" style={this.styles.buttonContainer}>\n        <h2>Login/out Button Component</h2>\n        <p>Conditionally renders either LoginButton or LogoutButton depending on its current state.</p>\n        {button}\n      </div>\n    );\n  }\n}\n\nexport default ConditionalRender;`}],\n                                    ['markedCode17',\n                                      {type: 'language-javascript',\ncode:\n`import React from 'react';\n\nconst styles = {\n  pre: {fontSize: '1.4rem'}\n}\n\nconst MarkedCode = ({code, codeID, type}) => (\n  <div>\n      <pre className={type} key={codeID} style={styles.pre}><code>\n        {code}\n      </code>\n    </pre>\n  </div>\n);\n\nexport default MarkedCode;`}],\n                              ['codeGenerator17',\n                                {type: 'language-javascript',\n                                 code:\n`import React from 'react';\n\nimport Prism from \"prismjs\";\nimport MarkedCode from './markedCode.component';\n\nimport '../prism.css'\n\nclass CodeGenerator extends React.Component{\n  constructor(props){\n       super(props);\n\n       this.state = {\n         codeBlocks: new Map([['codeID-goes-here',\n                             {type: 'language-goes-here',\n                              code: code-goes-here]],\n                           [['next-codeID-goes-here',\n                              {type: 'language-goes-here',\n                              code: code-goes-here]])\n         }\n   };`}]\n                    ])\n        };\n  }\n\n  render(){\n    const {codeId} = this.props;\n    const {type, code} = this.state.codeBlocks.get(codeId);\n\n    return <MarkedCode codeID={codeId} code={code} type={type} />;\n  }\n}\n\nexport default CodeGenerator;\n"]},"metadata":{},"sourceType":"module"}