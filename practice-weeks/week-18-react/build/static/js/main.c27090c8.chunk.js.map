{"version":3,"sources":["logo.svg","components/code-block/markedCode.component.jsx","components/code-block/codeGenerator.component.jsx","codeBlocks.js","generalCode.js","generalPractice18.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","styles","pre","fontSize","MarkedCode","code","codeID","type","className","key","style","CodeGenerator","props","state","codeBlocks","map","block","codeId","title","h2","color","textAlign","margin","console","log","this","React","Component","generalCode","Map","GeneralPractice18","duoImage","width","height","imageHandler","e","target","src","id","upState","includes","setState","displayHidden","image1","image2","hidden","display","image3","get","conImtype","conImcode","onClick","App","background","padding","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c27090c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nconst styles = {\n  pre: {fontSize: '1.4rem'},\n}\n\nconst MarkedCode = ({code, codeID, type}) => (\n  <div>\n      <pre className={type} key={codeID} style={styles.pre}><code>\n        {code}\n      </code>\n    </pre>\n  </div>\n);\n\nexport default MarkedCode;\n","import React from 'react';\n\nimport Prism from \"prismjs\";\nimport MarkedCode from './markedCode.component';\n\nimport './prism.css'\n\nclass CodeGenerator extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n      codeBlocks: this.props.codeBlocks.map(block =>\n                      ({codeId: block.codeID,\n                        type: block.type,\n                        code: block.code,\n                        title: block.title}))\n    };\n\n    this.styles = {\n      h2: { color: '#32DD72',\n            textAlign: 'left',\n            margin: '20px 0 0 0'}\n    }\n  }\n\n  render(){\n    console.log(this.state.codeBlocks);\n    const {codeId, type, code, title} = this.state.codeBlocks;\n\n    return this.state.codeBlocks.map(block =>\n    (\n      <div>\n        <h2 style={this.styles.h2}>{block.title}</h2>\n        <MarkedCode codeID={block.codeId} code={block.code} type={block.type} />\n      </div>\n    ));\n    // return <div></div>\n  }\n}\n\nexport default CodeGenerator;\n","const codeBlocks = [\n    {codeId: \"CodeGenMod\",\n      title: \"Modified CodeGenerator State Source for Better Re-Usability & Seperation\",\n      type: \"language-javascript\",\n      code: `      //Instead of defining state inside CodeGenetor, state is now passed in from file by root Component\n      //Also coupled header with codeBlock, set by passing in 'title' prop\n      class CodeGenerator extends React.Component{\n        constructor(props){\n          super(props);\n\n          this.state = {\n            codeBlocks: this.props.codeBlocks.map(block =>\n                            ({codeId: block.codeID,\n                              type: block.type,\n                              code: block.code,\n                              title: block.title}))\n          };\n\n          this.styles = {\n            h2: { color: '#32DD72',\n                  textAlign: 'left',\n                  margin: '20px 0 0 0'}\n          }\n        }\n\n        render(){\n          console.log(this.state.codeBlocks);\n          const {codeId, type, code, title} = this.state.codeBlocks;\n\n          return this.state.codeBlocks.map(block =>\n          (\n            <div>\n              <h2 style={this.styles.h2}>{block.title}</h2>\n              <MarkedCode codeID={block.codeId} code={block.code} type={block.type} />\n            </div>\n          ));\n          // return <div></div>\n        }\n      }`\n    },\n    {codeId: \"CodeGenMode2\",\n      title: \"\",\n      type: \"language-javascript\",\n      code:\n      `      //App.js (partial)\n\n      //Data for codeBlocks imported in array of objects containing MarkedCode properties, one object per MarkedCode\n      import CodeGenerator from './components/code-block/codeGenerator.component';\n      import codeBlocks from './codeBlocks.js';\n\n      function App() {\n        return (\n          <div className=\"App\" style={styles.App}>\n            <CodeGenerator codeBlocks={codeBlocks} />\n          </div>\n        );\n      }`\n    }\n];\n\nexport default codeBlocks;\n","const generalCode = new Map([['conditionalImage',\n                               {type: 'language-javascript',\n                                code:\n`\nclass GeneralPractice18 extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state = {image1: 'boxA.gif',\n                  image2: 'boxB.gif',\n                  image3: 'boxC.gif',\n                  hidden: {display: 'none'}};\n  }\n\n  styles = {\n    duoImage: {width: '220px',\n               height: '200px'},\n  }\n\n  imageHandler = (e) => {\n    const {src, id} = e.target;\n\n    const upState = src.includes('boxA.gif') ? {[id]: 'boxB.gif'} : {[id]: 'boxA.gif'};\n    this.setState(upState, this.displayHidden);\n  }\n\n  displayHidden = () => {\n    this.state.image1 === this.state.image2 ? this.setState({hidden: {display: 'inline'}}) : this.setState({hidden: {display: 'none'}});\n  }\n\n  render(){\n    const {type: conImtype, conImcode} = generalCode.get('conditionalImage');\n\n    return (\n        <div>\n            <h2>Conditional Render of Image Based on Same Image State for First Two Images</h2>\n            <img id= 'image1' key='image1' src={this.state.image1} onClick={this.imageHandler} style={this.styles.duoImage}></img>\n            <img id= 'image2' key='image2' src={this.state.image2} onClick={this.imageHandler} style={this.styles.duoImage}></img>\n            <img id= 'image3' key='image3' src={this.state.image3} onClick={this.imageHandler} style={{...this.state.hidden, ...this.styles.duoImage}}></img>\n            <h4>Click on images to switch & Reveal Hidden Image</h4>\n        </div>\n      );\n  }\n}\n                                `}]]);\n\nexport default generalCode;\n","import React from 'react';\n\nimport MarkedCode from './components/code-block/markedCode.component';\nimport generalCode from './generalCode.js';\n\nclass GeneralPractice18 extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state = {image1: 'boxA.gif',\n                  image2: 'boxB.gif',\n                  image3: 'boxC.gif',\n                  hidden: {display: 'none'}};\n  }\n\n  styles = {\n    duoImage: {width: '220px',\n               height: '200px'},\n  }\n\n  imageHandler = (e) => {\n    const {src, id} = e.target;\n\n    const upState = src.includes('boxA.gif') ? {[id]: 'boxB.gif'} : {[id]: 'boxA.gif'};\n    this.setState(upState, this.displayHidden);\n  }\n\n  displayHidden = () => {\n    this.state.image1 === this.state.image2 ? this.setState({hidden: {display: 'inline'}}) : this.setState({hidden: {display: 'none'}});\n  }\n\n  render(){\n    const {type: conImtype, code: conImcode} = generalCode.get('conditionalImage');\n    return (\n        <div>\n          <h2>Conditional Render of Image Based on Same Image State for First Two Images</h2>\n          <img id= 'image1' key='image1' src={this.state.image1} onClick={this.imageHandler} style={this.styles.duoImage}></img>\n          <img id= 'image2' key='image2' src={this.state.image2} onClick={this.imageHandler} style={this.styles.duoImage}></img>\n          <img id= 'image3' key='image3' src={this.state.image3} onClick={this.imageHandler} style={{...this.state.hidden, ...this.styles.duoImage}}></img>\n          <h4>Click on images to switch & Reveal Hidden Image</h4>\n          <MarkedCode codeID='conditionalImage' code={conImcode} type={conImtype} />;\n      </div>\n      );\n  }\n}\n\nexport default GeneralPractice18;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport CodeGenerator from './components/code-block/codeGenerator.component';\nimport codeBlocks from './codeBlocks.js';\nimport GeneralPractice18 from './generalPractice18';\n\nconst styles = {\n  App: {background: 'green',\n        width: '85%',\n        margin: '0 auto',\n        padding: '10px'\n  },\n}\n\nfunction App() {\n  return (\n    <div className=\"App\" style={styles.App}>\n      <CodeGenerator codeBlocks={codeBlocks} />\n      <GeneralPractice18 />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}