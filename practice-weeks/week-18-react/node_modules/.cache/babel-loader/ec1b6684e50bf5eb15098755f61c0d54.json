{"ast":null,"code":"import _objectSpread from \"/Users/miskellk/Desktop/lain-projects/dev-blog/practice-weeks/week-18-react/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/miskellk/Desktop/lain-projects/dev-blog/practice-weeks/week-18-react/src/generalPractice18.jsx\";\nimport React from 'react';\nimport MarkedCode from './components/code-block/markedCode.component';\nimport generalCode from './generalCode.js';\n\nclass GeneralPractice18 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.styles = {\n      duoImage: {\n        width: '220px',\n        height: '200px'\n      }\n    };\n\n    this.imageHandler = e => {\n      const _e$target = e.target,\n            src = _e$target.src,\n            id = _e$target.id;\n      const upState = src.includes('boxA.gif') ? {\n        [id]: 'boxB.gif'\n      } : {\n        [id]: 'boxA.gif'\n      };\n      this.setState(upState, this.displayHidden);\n    };\n\n    this.displayHidden = () => {\n      this.state.image1 === this.state.image2 ? this.setState({\n        hidden: {\n          display: 'inline'\n        }\n      }) : this.setState({\n        hidden: {\n          display: 'none'\n        }\n      });\n    };\n\n    this.list = () => {\n      const listStyle = {\n        display: 'flex'\n      };\n      const people = [{\n        key: '2920',\n        name: 'Tom',\n        age: 27,\n        city: 'Boston'\n      }, {\n        key: '1240',\n        name: 'Mitsuki',\n        age: 33,\n        city: 'Seattle'\n      }, {\n        key: '2310',\n        name: 'Tanya',\n        age: 44,\n        city: 'Chicago'\n      }];\n      const listItems = people.map(({\n        key,\n        name,\n        age,\n        city\n      }, index) => React.createElement(\"li\", {\n        id: \"test\",\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, name, \" is \", age, \" years old and lives in \", city));\n      const keys = listItems.map(listItem => React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Unique Key: \", listItem.key));\n      return React.createElement(\"span\", {\n        style: listStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, listItems), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, keys));\n    };\n\n    this.handleSubmit = event => {\n      alert('Binary now in red');\n      this.setState({\n        binaryColor: 'red'\n      });\n      event.preventDefault();\n    };\n\n    this.createBinary = string => {\n      const binaryOut = string.split('').map(char => char.charCodeAt(0).toString(2)).join(' ');\n      this.setState({\n        binary: [binaryOut]\n      });\n    };\n\n    this.textHandle = event => {\n      this.setState({\n        textValue: event.target.value\n      });\n      this.createBinary(event.target.value);\n    };\n\n    this.formSection = () => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.textValue,\n      onChange: this.textHandle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"checkbox\",\n      value: this.state.checked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Process\")), React.createElement(\"div\", {\n      style: {\n        color: this.state.binaryColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, this.state.binary));\n\n    this.state = {\n      image1: 'boxA.gif',\n      image2: 'boxB.gif',\n      image3: 'boxC.gif',\n      hidden: {\n        display: 'none',\n        binary: ''\n      }\n    };\n  }\n\n  //controlled elements via form end\n  render() {\n    const _generalCode$get = generalCode.get('conditionalImage'),\n          conImgType = _generalCode$get.type,\n          conImgcode = _generalCode$get.code;\n\n    const _generalCode$get2 = generalCode.get('listKeys'),\n          listKeyType = _generalCode$get2.type,\n          listKeyCode = _generalCode$get2.code;\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Conditional Render of Image Based on Same Image State for First Two Images\"), React.createElement(\"img\", {\n      id: \"image1\",\n      src: this.state.image1,\n      onClick: this.imageHandler,\n      style: this.styles.duoImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      id: \"image2\",\n      src: this.state.image2,\n      onClick: this.imageHandler,\n      style: this.styles.duoImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      id: \"image3\",\n      src: this.state.image3,\n      onClick: this.imageHandler,\n      style: _objectSpread({}, this.state.hidden, {}, this.styles.duoImage),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Click on images to switch & Reveal Hidden Image\"), React.createElement(MarkedCode, {\n      codeID: \"conditionalImage\",\n      code: conImgcode,\n      type: conImgType,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Rendering a List from an Array of Objects w/ Unique Keys\"), this.list(), React.createElement(MarkedCode, {\n      codeId: \"listKeys\",\n      code: listKeyCode,\n      type: listKeyType,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), this.formSection());\n  }\n\n}\n\nexport default GeneralPractice18;","map":{"version":3,"sources":["/Users/miskellk/Desktop/lain-projects/dev-blog/practice-weeks/week-18-react/src/generalPractice18.jsx"],"names":["React","MarkedCode","generalCode","GeneralPractice18","Component","constructor","props","styles","duoImage","width","height","imageHandler","e","target","src","id","upState","includes","setState","displayHidden","state","image1","image2","hidden","display","list","listStyle","people","key","name","age","city","listItems","map","index","keys","listItem","handleSubmit","event","alert","binaryColor","preventDefault","createBinary","string","binaryOut","split","char","charCodeAt","toString","join","binary","textHandle","textValue","value","formSection","checked","color","image3","render","get","conImgType","type","conImgcode","code","listKeyType","listKeyCode"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport MarkedCode from './components/code-block/markedCode.component';\nimport generalCode from './generalCode.js';\n\nclass GeneralPractice18 extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state = {image1: 'boxA.gif',\n                  image2: 'boxB.gif',\n                  image3: 'boxC.gif',\n                  hidden: {display: 'none',\n                  binary: ''}};\n  }\n\n  styles = {\n    duoImage: {width: '220px',\n               height: '200px'},\n\n  }\n\n  //conditional image rendering code start\n  imageHandler = (e) => {\n    const {src, id} = e.target;\n\n    const upState = src.includes('boxA.gif') ? {[id]: 'boxB.gif'} : {[id]: 'boxA.gif'};\n    this.setState(upState, this.displayHidden);\n  }\n\n  displayHidden = () => {\n    this.state.image1 === this.state.image2 ? this.setState({hidden: {display: 'inline'}}) : this.setState({hidden: {display: 'none'}});\n  }\n  //conditional image rendering code end\n\n  //rendering multiple elements through list with unique keys start\n  list = () => {\n    const listStyle = {display: 'flex'};\n\n    const people= [{key: '2920', name: 'Tom', age: 27, city: 'Boston'},\n                   {key: '1240', name: 'Mitsuki', age: 33, city: 'Seattle'},\n                   {key: '2310', name: 'Tanya', age: 44, city: 'Chicago'}\n                  ];\n    const listItems = people.map(({key, name, age, city}, index) => <li id=\"test\" key={key}>{name} is {age} years old and lives in {city}</li>);\n\n    const keys = listItems.map(listItem => <li>Unique Key: {listItem.key}</li>);\n\n    return (<span style={listStyle}>\n              <ul>{listItems}</ul>\n              <ul>{keys}</ul>\n            </span>);\n  }\n  //rendering multiple elements through list with unique keys end\n\n  //controlled elements via form start\n  handleSubmit = event => {\n    alert('Binary now in red');\n    this.setState({binaryColor: 'red'})\n    event.preventDefault();\n  }\n\n  createBinary = string => {\n    const binaryOut = string.split('').map(char => char.charCodeAt(0).toString(2)).join(' ');\n    this.setState({binary: [binaryOut]});\n  }\n\n  textHandle = event => {\n    this.setState({textValue: event.target.value});\n    this.createBinary(event.target.value);\n  }\n\n  formSection = () =>\n   (<div>\n       <form>\n        <input type='text' value={this.state.textValue} onChange={this.textHandle} />\n        <input type='checkbox' value={this.state.checked} />\n        <button type='submit' onClick={this.handleSubmit}>Process</button>\n       </form>\n       <div style={{color: this.state.binaryColor}}>{this.state.binary}</div>\n    </div>)\n\n  //controlled elements via form end\n\n  render(){\n\n    const {type: conImgType, code: conImgcode} = generalCode.get('conditionalImage');\n    const {type: listKeyType, code: listKeyCode} = generalCode.get('listKeys');\n\n    return (\n        <div>\n          <h2>Conditional Render of Image Based on Same Image State for First Two Images</h2>\n          <img id= 'image1' src={this.state.image1} onClick={this.imageHandler} style={this.styles.duoImage}></img>\n          <img id= 'image2' src={this.state.image2} onClick={this.imageHandler} style={this.styles.duoImage}></img>\n          <img id= 'image3' src={this.state.image3} onClick={this.imageHandler} style={{...this.state.hidden, ...this.styles.duoImage}}></img>\n          <h4>Click on images to switch & Reveal Hidden Image</h4>\n          <MarkedCode codeID='conditionalImage' code={conImgcode} type={conImgType} />\n          <h2>Rendering a List from an Array of Objects w/ Unique Keys</h2>\n          {this.list()}\n          <MarkedCode codeId ='listKeys' code={listKeyCode} type={listKeyType} />\n          {this.formSection()}\n      </div>\n      );\n  }\n}\n\nexport default GeneralPractice18;\n"]},"metadata":{},"sourceType":"module"}